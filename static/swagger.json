{
  "openapi": "3.0.0",
  "info": {
    "description": "RAI bet backend test",
    "version": "1.0.0",
    "title": "notification_service"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/event/all": {
      "get": {
        "summary": "Get all events",
        "operationId": "getAllEvents",
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "List of events"
          },
          "404": {
            "description": "No events found"
          }
        }
      }
    },
    "/event/{event_id}": {
      "get": {
        "summary": "Get a single event",
        "operationId": "getEvent",
        "tags": [
          "Event"
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the event to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing event",
        "operationId": "updateEvent",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the event to update"
          }
        ],
        "requestBody": {
          "description": "Event object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated successfully"
          },
          "415": {
            "description": "Invalid content type, expecting JSON"
          },
          "401": {
            "description": "Not authorized: user wasn't found or the user is not ADMIN role"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an event",
        "operationId": "deleteEvent",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the event to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully"
          },
          "401": {
            "description": "Not authorized: user wasn't found or the user is not ADMIN role"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/event/": {
      "post": {
        "summary": "Create a new event",
        "operationId": "createEvent",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "description": "Event object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event created successfully"
          },
          "400": {
            "description": "missing arguments: title or  date"
          },
          "401": {
            "description": "Not authorized: user wasn't found or the user is not ADMIN role"
          }
        }
      }
    },
    "/user/{user_id}": {
      "get": {
        "summary": "Get a single user",
        "operationId": "getUser",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing user",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "description": "User object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "415": {
            "description": "Invalid content type, expecting JSON"
          },
          "400": {
            "description": "Enum wasn't found the role that was provided is not ADMIN/USER | Name already exist: username already in use"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an user",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/": {
      "post": {
        "summary": "Create a new user",
        "operationId": "createUser",
        "tags": [
          "User"
        ],
        "requestBody": {
          "description": "User object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "415": {
            "description": "Invalid content type, expecting JSON"
          },
          "400": {
            "description": "missing arguments: username or role | Enum wasn't found the role that was provided is not ADMIN/USER | Name already exist: username already in use"
          }
        }
      }
    },
    "/venue/{venue_id}": {
      "get": {
        "summary": "Get a single venue",
        "operationId": "getVenue",
        "tags": [
          "Venue"
        ],
        "parameters": [
          {
            "name": "venue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the venue to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Venue retrieved successfully"
          },
          "404": {
            "description": "Venue not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing venue",
        "operationId": "updateVenue",
        "tags": [
          "Venue"
        ],
        "parameters": [
          {
            "name": "venue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the Venue to update"
          }
        ],
        "requestBody": {
          "description": "Venue object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Venue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Venue updated successfully"
          },
          "415": {
            "description": "Invalid content type, expecting JSON"
          },
          "400": {
            "description": "Name already exist: \"room_name\" already inuse with different room name"
          },
          "404": {
            "description": "Venue not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an Venue",
        "operationId": "deleteVenue",
        "tags": [
          "Venue"
        ],
        "parameters": [
          {
            "name": "venue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the Venue to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Venue deleted successfully"
          },
          "404": {
            "description": "Venue not found"
          }
        }
      }
    },
    "/venue/": {
      "post": {
        "summary": "Create a new Venue",
        "operationId": "createVenue",
        "tags": [
          "Venue"
        ],
        "requestBody": {
          "description": "Venue object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Venue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Venue updated successfully"
          },
          "415": {
            "description": "Invalid content type, expecting JSON"
          },
          "400": {
            "description": "missing arguments: \"room_name\" | Name already exist: \"room_name\" already in use"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Event": {
        "type": "object",
        "required": [
          "title",
          "date"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "description": "This will be the event datetime",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "guests": {
            "description": "This will determine the number of guests",
            "type": "integer"
          },
          "link": {
            "description": "This will the event link (e.g.,zoom meeting)",
            "type": "string"
          },
          "location": {
            "description": "This will physical address for the event",
            "type": "string"
          },
          "notifications": {
            "description": "This will be the amount of seconds that you want alert in advance (default without any value received it will be 30 minutes)",
            "type": "integer"
          },
          "venue": {
            "description": "This will be the id of the venue from the venues",
            "type": "integer"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "role"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER"
            ],
            "description": "The role of the user"
          }
        }
      },
      "Venue": {
        "type": "object",
        "required": [
          "room_name"
        ],
        "properties": {
          "room_name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "For the simplicity there is no need for password only need to username."
      }
    }
  }
}